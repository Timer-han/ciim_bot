from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, or_, func
from database.database import async_session
from database.models import User, Event, EventRegistration
from keyboards.keyboards import (
    get_admin_panel_keyboard, get_event_management_keyboard,
    get_broadcast_keyboard, get_confirmation_keyboard,
    build_events_list_keyboard, get_back_keyboard, get_cancel_keyboard
)
from datetime import datetime, timedelta
import re
import logging
import asyncio

router = Router()
logger = logging.getLogger(__name__)

class CreateEventStates(StatesGroup):
    title = State()
    description = State()
    location = State()
    city = State()
    date_time = State()
    max_participants = State()
    registration_required = State()
    media = State()

class EditEventStates(StatesGroup):
    event_id = State()
    field = State()
    value = State()

class ManageAdminStates(StatesGroup):
    action = State()
    user_id = State()

class BroadcastStates(StatesGroup):
    target = State()
    message_text = State()
    confirm = State()

async def check_admin_or_moderator(telegram_id: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    try:
        async with async_session() as session:
            result = await session.execute(select(User).where(User.telegram_id == telegram_id))
            user = result.scalar_one_or_none()
            
            if not user or user.role not in ['admin', 'moderator']:
                return False, 'user'
            
            return True, user.role
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return False, 'user'

async def check_admin_only(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    has_access, role = await check_admin_or_moderator(telegram_id)
    return has_access and role == 'admin'

async def get_user_stats() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        async with async_session() as session:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = await session.execute(select(func.count(User.id)))
            total_count = total_users.scalar()
            
            # –ü–æ —Ä–æ–ª—è–º
            admins = await session.execute(select(func.count(User.id)).where(User.role == 'admin'))
            moderators = await session.execute(select(func.count(User.id)).where(User.role == 'moderator'))
            users = await session.execute(select(func.count(User.id)).where(User.role == 'user'))
            
            # –ü–æ –≥–æ—Ä–æ–¥–∞–º
            moscow = await session.execute(select(func.count(User.id)).where(User.city == '–ú–æ—Å–∫–≤–∞'))
            kazan = await session.execute(select(func.count(User.id)).where(User.city == '–ö–∞–∑–∞–Ω—å'))
            no_city = await session.execute(select(func.count(User.id)).where(User.city.is_(None)))
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = datetime.now() - timedelta(days=7)
            recent_users = await session.execute(
                select(func.count(User.id)).where(User.created_at >= week_ago)
            )
            
            return {
                'total': total_count,
                'admins': admins.scalar(),
                'moderators': moderators.scalar(),
                'users': users.scalar(),
                'moscow': moscow.scalar(),
                'kazan': kazan.scalar(),
                'no_city': no_city.scalar(),
                'recent': recent_users.scalar()
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}

async def get_events_stats() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    try:
        async with async_session() as session:
            now = datetime.now()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_events = await session.execute(select(func.count(Event.id)))
            upcoming_events = await session.execute(
                select(func.count(Event.id)).where(and_(Event.date_time > now, Event.is_visible == True))
            )
            past_events = await session.execute(
                select(func.count(Event.id)).where(Event.date_time <= now)
            )
            hidden_events = await session.execute(
                select(func.count(Event.id)).where(Event.is_visible == False)
            )
            
            # –ü–æ –≥–æ—Ä–æ–¥–∞–º
            moscow_events = await session.execute(
                select(func.count(Event.id)).where(and_(Event.city == '–ú–æ—Å–∫–≤–∞', Event.date_time > now))
            )
            kazan_events = await session.execute(
                select(func.count(Event.id)).where(and_(Event.city == '–ö–∞–∑–∞–Ω—å', Event.date_time > now))
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            total_registrations = await session.execute(select(func.count(EventRegistration.id)))
            
            return {
                'total': total_events.scalar(),
                'upcoming': upcoming_events.scalar(),
                'past': past_events.scalar(),
                'hidden': hidden_events.scalar(),
                'moscow': moscow_events.scalar(),
                'kazan': kazan_events.scalar(),
                'registrations': total_registrations.scalar()
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
        return {}
    
async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None, parse_mode="HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ"""
    try:
        await callback.message.edit_text(
            text,
            parse_mode=parse_mode,
            reply_markup=reply_markup
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except Exception:
            pass
        
        await callback.message.answer(
            text,
            parse_mode=parse_mode,
            reply_markup=reply_markup
        )


@router.message(F.text == "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
async def show_admin_panel(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    has_access, role = await check_admin_or_moderator(message.from_user.id)
    
    if not has_access:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_stats = await get_user_stats()
    event_stats = await get_events_stats()
    
    stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
    
    if user_stats:
        stats_text += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ: {user_stats.get('total', 0)}\n"
        stats_text += f"‚Ä¢ –ê–¥–º–∏–Ω—ã: {user_stats.get('admins', 0)}\n"
        stats_text += f"‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã: {user_stats.get('moderators', 0)}\n"
        stats_text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {user_stats.get('users', 0)}\n"
        stats_text += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {user_stats.get('recent', 0)}\n\n"
        
        stats_text += f"üèôÔ∏è <b>–ü–æ –≥–æ—Ä–æ–¥–∞–º:</b>\n"
        stats_text += f"‚Ä¢ –ú–æ—Å–∫–≤–∞: {user_stats.get('moscow', 0)}\n"
        stats_text += f"‚Ä¢ –ö–∞–∑–∞–Ω—å: {user_stats.get('kazan', 0)}\n"
        stats_text += f"‚Ä¢ –ë–µ–∑ –≥–æ—Ä–æ–¥–∞: {user_stats.get('no_city', 0)}\n\n"
    
    if event_stats:
        stats_text += f"üìÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ: {event_stats.get('total', 0)}\n"
        stats_text += f"‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: {event_stats.get('upcoming', 0)}\n"
        stats_text += f"‚Ä¢ –ü—Ä–æ—à–µ–¥—à–∏—Ö: {event_stats.get('past', 0)}\n"
        stats_text += f"‚Ä¢ –°–∫—Ä—ã—Ç—ã—Ö: {event_stats.get('hidden', 0)}\n"
        stats_text += f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {event_stats.get('registrations', 0)}\n"
    
    await message.answer(
        stats_text,
        parse_mode="HTML",
        reply_markup=get_admin_panel_keyboard(role)
    )

@router.callback_query(F.data == "admin_panel")
async def show_admin_panel_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ callback"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_stats = await get_user_stats()
    event_stats = await get_events_stats()
    
    stats_text = f"üìä <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n"
    stats_text += f"–†–æ–ª—å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if role == 'admin' else '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'}\n\n"
    
    if user_stats and event_stats:
        stats_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats.get('total', 0)}\n"
        stats_text += f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {event_stats.get('upcoming', 0)} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö\n"
        stats_text += f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {event_stats.get('registrations', 0)}\n"
    
    await safe_edit_message(
        callback,
        stats_text,
        parse_mode="HTML",
        reply_markup=get_admin_panel_keyboard(role)
    )

@router.callback_query(F.data == "create_event")
async def start_create_event(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await state.set_state(CreateEventStates.title)
    await safe_edit_message(
        callback,
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n"
        "–®–∞–≥ 1/7: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )

@router.message(CreateEventStates.title)
async def process_event_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    if len(message.text) > 255:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(title=message.text.strip())
    await state.set_state(CreateEventStates.description)
    
    await message.answer(
        "üìÑ <b>–®–∞–≥ 2/7:</b> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )

@router.message(CreateEventStates.description)
async def process_event_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    description = None if message.text.strip() == '-' else message.text.strip()
    await state.update_data(description=description)
    await state.set_state(CreateEventStates.location)
    
    await message.answer(
        "üìç <b>–®–∞–≥ 3/7:</b> –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )

@router.message(CreateEventStates.location)
async def process_event_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"""
    location = None if message.text.strip() == '-' else message.text.strip()
    await state.update_data(location=location)
    await state.set_state(CreateEventStates.city)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè¢ –ú–æ—Å–∫–≤–∞", callback_data="city_select_moscow")],
        [InlineKeyboardButton(text="üïå –ö–∞–∑–∞–Ω—å", callback_data="city_select_kazan")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_panel")]
    ])
    
    await message.answer(
        "üèôÔ∏è <b>–®–∞–≥ 4/7:</b> –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("city_select_"))
async def process_event_city_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ callback"""
    city_code = callback.data.split("_")[2]
    city = "–ú–æ—Å–∫–≤–∞" if city_code == "moscow" else "–ö–∞–∑–∞–Ω—å"
    
    await state.update_data(city=city)
    await state.set_state(CreateEventStates.date_time)
    
    await safe_edit_message(
        callback,
        f"‚úÖ –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: <b>{city}</b>\n\n"
        "üìÖ <b>–®–∞–≥ 5/7:</b> –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
        "–§–æ—Ä–º–∞—Ç: <code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.2024 18:30</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )

@router.message(CreateEventStates.date_time)
async def process_event_datetime(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        datetime_obj = datetime.strptime(message.text.strip(), "%d.%m.%Y %H:%M")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º (–º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ —á–∞—Å)
        min_time = datetime.now() + timedelta(hours=1)
        if datetime_obj <= min_time:
            await message.answer(
                "‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ —á–∞—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º (–º–∞–∫—Å–∏–º—É–º –≥–æ–¥)
        max_time = datetime.now() + timedelta(days=365)
        if datetime_obj > max_time:
            await message.answer(
                "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —á–µ–º —á–µ—Ä–µ–∑ –≥–æ–¥.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard()
            )
            return
        
        await state.update_data(date_time=datetime_obj)
        await state.set_state(CreateEventStates.max_participants)
        
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{datetime_obj.strftime('%d.%m.%Y –≤ %H:%M')}</b>\n\n"
            "üë• <b>–®–∞–≥ 6/7:</b> –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code> –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞):",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.2024 18:30</code>",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )

@router.message(CreateEventStates.max_participants)
async def process_event_max_participants(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    max_participants = None
    
    if message.text.strip() != '-':
        try:
            max_participants = int(message.text.strip())
            if max_participants <= 0:
                await message.answer(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º:",
                    reply_markup=get_cancel_keyboard()
                )
                return
            if max_participants > 10000:
                await message.answer(
                    "‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10000):",
                    reply_markup=get_cancel_keyboard()
                )
                return
        except ValueError:
            await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ <code>-</code> –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:",
                parse_mode="HTML",
                reply_markup=get_cancel_keyboard()
            )
            return
    
    await state.update_data(max_participants=max_participants)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è", callback_data="registration_required_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–∞", callback_data="registration_required_no")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_panel")]
    ])
    
    limit_text = f"{max_participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" if max_participants else "–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
    await message.answer(
        f"‚úÖ –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{limit_text}</b>\n\n"
        "üìù <b>–®–∞–≥ 7/7:</b> –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("registration_required_"))
async def process_registration_required(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    registration_required = callback.data.split("_")[2] == "yes"
    await state.update_data(registration_required=registration_required)
    await state.set_state(CreateEventStates.media)
    
    reg_text = "—Ç—Ä–µ–±—É–µ—Ç—Å—è" if registration_required else "–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
    await safe_edit_message(
        callback,
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <b>{reg_text}</b>\n\n"
        "üì∏ <b>–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥:</b> –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )

@router.message(CreateEventStates.media)
async def process_event_media(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    photo_file_id = None
    video_file_id = None
    media_type = None
    
    if message.text and message.text.strip() == '-':
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞
        pass
    elif message.photo:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ñ–æ—Ç–æ
        photo_file_id = message.photo[-1].file_id
        media_type = 'photo'
    elif message.video:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ
        if message.video.file_size and message.video.file_size > 50 * 1024 * 1024:  # 50MB
            await message.answer(
                "‚ùå –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50MB).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
                parse_mode="HTML",
                reply_markup=get_cancel_keyboard()
            )
            return
        video_file_id = message.video.file_id
        media_type = 'video'
    elif message.text != '-':
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ <code>-</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
            result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
            creator = result.scalar_one_or_none()
            
            if not creator:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            event = Event(
                title=data['title'],
                description=data['description'],
                location=data['location'],
                city=data['city'],
                date_time=data['date_time'],
                creator_id=creator.id,
                max_participants=data['max_participants'],
                registration_required=data['registration_required'],
                photo_file_id=photo_file_id,
                video_file_id=video_file_id,
                media_type=media_type
            )
            
            session.add(event)
            await session.commit()
            await session.refresh(event)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        summary = f"üéâ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
        summary += f"üìÖ <b>{event.title}</b>\n"
        summary += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        summary += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {event.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        summary += f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {event.city}\n"
        summary += f"üïê <b>–î–∞—Ç–∞:</b> {event.date_time.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        summary += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {'–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ' if not event.max_participants else event.max_participants}\n"
        summary += f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if event.registration_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
        summary += f"üì∏ <b>–ú–µ–¥–∏–∞:</b> {'–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if media_type else '–ù–µ—Ç'}\n"
        summary += f"\nüÜî <b>ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b> {event.id}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if photo_file_id:
            await message.answer_photo(
                photo=photo_file_id,
                caption=summary,
                parse_mode="HTML",
                reply_markup=get_back_keyboard("admin_panel")
            )
        elif video_file_id:
            await message.answer_video(
                video=video_file_id,
                caption=summary,
                parse_mode="HTML",
                reply_markup=get_back_keyboard("admin_panel")
            )
        else:
            await message.answer(
                summary,
                parse_mode="HTML",
                reply_markup=get_back_keyboard("admin_panel")
            )
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {creator.telegram_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_keyboard("admin_panel")
        )
    finally:
        await state.clear()


@router.callback_query(F.data == "my_created_events")
async def show_my_created_events(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
            user = user_result.scalar_one_or_none()
            
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            events_result = await session.execute(
                select(Event)
                .where(Event.creator_id == user.id)
                .order_by(Event.date_time.desc())
            )
            events = events_result.scalars().all()
        
        if not events:
            await safe_edit_message(
                callback,
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
                reply_markup=get_back_keyboard("manage_events")
            )
            return
        
        await safe_edit_message(
            callback,
            f"üìã <b>–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b> ({len(events)}):",
            parse_mode="HTML",
            reply_markup=build_events_list_keyboard(events, "manage_event")
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", show_alert=True)

@router.callback_query(F.data == "broadcast")
async def show_broadcast_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    user_stats = await get_user_stats()
    
    text = "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
    if user_stats:
        text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats.get('total', 0)}\n"
        text += f"üè¢ –í –ú–æ—Å–∫–≤–µ: {user_stats.get('moscow', 0)}\n"
        text += f"üïå –í –ö–∞–∑–∞–Ω–∏: {user_stats.get('kazan', 0)}\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:"
    
    await safe_edit_message(
        callback,
        text,
        parse_mode="HTML",
        reply_markup=get_broadcast_keyboard()
    )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...

@router.callback_query(F.data.startswith("manage_event_"))
async def show_event_management_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º"""
    try:
        event_id = int(callback.data.split("_")[2])
        
        async with async_session() as session:
            result = await session.execute(select(Event).where(Event.id == event_id))
            event = result.scalar_one_or_none()
            
            if not event:
                await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            user_result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
            user = user_result.scalar_one_or_none()
            
            if not user or (user.role not in ['admin', 'moderator'] and user.id != event.creator_id):
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º", show_alert=True)
                return
            
            # –°—á–∏—Ç–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants_result = await session.execute(
                select(EventRegistration).where(EventRegistration.event_id == event_id)
            )
            participants_count = len(participants_result.scalars().all())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        now = datetime.now()
        is_past = event.date_time <= now
        
        event_text = f"üìÖ <b>{event.title}</b>\n"
        event_text += f"üÜî ID: {event.id}\n\n"
        
        event_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        event_text += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {event.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        event_text += f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {event.city}\n"
        
        # –°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        if is_past:
            event_text += f"üïê <b>–î–∞—Ç–∞:</b> {event.date_time.strftime('%d.%m.%Y –≤ %H:%M')} ‚è∞ <i>–ü—Ä–æ—à–ª–æ</i>\n"
        else:
            time_until = event.date_time - now
            if time_until.days > 0:
                event_text += f"üïê <b>–î–∞—Ç–∞:</b> {event.date_time.strftime('%d.%m.%Y –≤ %H:%M')} (—á–µ—Ä–µ–∑ {time_until.days} –¥–Ω.)\n"
            elif time_until.seconds > 3600:
                hours = time_until.seconds // 3600
                event_text += f"üïê <b>–î–∞—Ç–∞:</b> {event.date_time.strftime('%d.%m.%Y –≤ %H:%M')} (—á–µ—Ä–µ–∑ {hours} —á.)\n"
            else:
                event_text += f"üïê <b>–î–∞—Ç–∞:</b> {event.date_time.strftime('%d.%m.%Y –≤ %H:%M')} ‚ö° <i>–°–∫–æ—Ä–æ!</i>\n"
        
        # –£—á–∞—Å—Ç–Ω–∏–∫–∏
        if event.max_participants:
            percentage = (participants_count / event.max_participants) * 100
            event_text += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {participants_count}/{event.max_participants} ({percentage:.0f}%)\n"
        else:
            event_text += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {participants_count}\n"
        
        # –°—Ç–∞—Ç—É—Å—ã
        if event.registration_required:
            status_icon = "üîì" if event.registration_open else "üîí"
            status_text = "–æ—Ç–∫—Ä—ã—Ç–∞" if event.registration_open else "–∑–∞–∫—Ä—ã—Ç–∞"
            event_text += f"{status_icon} <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {status_text}\n"
        else:
            event_text += "üÜì <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>\n"
        
        visibility_icon = "üëÅ" if event.is_visible else "üôà"
        visibility_text = "–≤–∏–¥–∏–º–æ" if event.is_visible else "—Å–∫—Ä—ã—Ç–æ"
        event_text += f"{visibility_icon} <b>–í–∏–¥–∏–º–æ—Å—Ç—å:</b> {visibility_text}\n"
        
        # –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        event_text += f"\nüìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {event.created_at.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        if event.updated_at and event.updated_at != event.created_at:
            event_text += f"‚úèÔ∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {event.updated_at.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = []
        
        if not is_past:
            keyboard.extend([
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_event_{event_id}")],
                [
                    InlineKeyboardButton(
                        text="üôà –°–∫—Ä—ã—Ç—å" if event.is_visible else "üëÅ –ü–æ–∫–∞–∑–∞—Ç—å", 
                        callback_data=f"toggle_visibility_{event_id}"
                    ),
                    InlineKeyboardButton(
                        text="üîí –ó–∞–∫—Ä—ã—Ç—å —Ä–µ–≥." if event.registration_open else "üîì –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–≥.", 
                        callback_data=f"toggle_registration_{event_id}"
                    )
                ]
            ])
        
        keyboard.extend([
            [InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"event_participants_{event_id}")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"event_stats_{event_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_event_{event_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_created_events")]
        ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if event.photo_file_id:
            await callback.message.answer_photo(
                photo=event.photo_file_id,
                caption=event_text,
                parse_mode="HTML",
                reply_markup=markup
            )
            await callback.message.delete()
        elif event.video_file_id:
            await callback.message.answer_video(
                video=event.video_file_id,
                caption=event_text,
                parse_mode="HTML",
                reply_markup=markup
            )
            await callback.message.delete()
        else:
            await safe_edit_message(
                callback,
                event_text,
                parse_mode="HTML",
                reply_markup=markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {callback.data}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", show_alert=True)

@router.callback_query(F.data.startswith("event_stats_"))
async def show_event_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        event_id = int(callback.data.split("_")[2])
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            event_result = await session.execute(select(Event).where(Event.id == event_id))
            event = event_result.scalar_one_or_none()
            
            if not event:
                await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏
            participants_result = await session.execute(
                select(User, EventRegistration)
                .join(EventRegistration)
                .where(EventRegistration.event_id == event_id)
                .order_by(EventRegistration.registered_at)
            )
            participants_data = participants_result.all()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            cities_stats = {}
            registration_dates = []
            
            for user, registration in participants_data:
                # –ü–æ –≥–æ—Ä–æ–¥–∞–º
                city = user.city or "–ù–µ —É–∫–∞–∑–∞–Ω"
                cities_stats[city] = cities_stats.get(city, 0) + 1
                
                # –î–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                registration_dates.append(registration.registered_at)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n"
        stats_text += f"üìÖ <b>{event.title}</b>\n\n"
        
        total_participants = len(participants_data)
        stats_text += f"üë• <b>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {total_participants}\n"
        
        if event.max_participants:
            percentage = (total_participants / event.max_participants) * 100
            stats_text += f"üìà <b>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å:</b> {percentage:.1f}%\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        if cities_stats:
            stats_text += f"\nüèôÔ∏è <b>–ü–æ –≥–æ—Ä–æ–¥–∞–º:</b>\n"
            for city, count in sorted(cities_stats.items(), key=lambda x: x[1], reverse=True):
                percentage = (count / total_participants) * 100 if total_participants > 0 else 0
                stats_text += f"‚Ä¢ {city}: {count} ({percentage:.1f}%)\n"
        
        # –î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
        if registration_dates:
            first_reg = min(registration_dates)
            last_reg = max(registration_dates)
            stats_text += f"\nüìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n"
            stats_text += f"‚Ä¢ –ü–µ—Ä–≤–∞—è: {first_reg.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            stats_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è: {last_reg.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
            now = datetime.now()
            recent_24h = sum(1 for date in registration_dates if (now - date).days == 0)
            recent_7d = sum(1 for date in registration_dates if (now - date).days <= 7)
            
            if recent_24h > 0 or recent_7d > 0:
                stats_text += f"‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {recent_24h}\n"
                stats_text += f"‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π: {recent_7d}\n"
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        if event.date_time > datetime.now() and total_participants > 0:
            days_until = (event.date_time - datetime.now()).days
            if days_until > 0:
                reg_days = (datetime.now() - min(registration_dates)).days if registration_dates else 1
                avg_per_day = total_participants / max(reg_days, 1)
                projected = total_participants + (avg_per_day * days_until)
                
                if event.max_participants:
                    projected = min(projected, event.max_participants)
                
                stats_text += f"\nüîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> ~{int(projected)}\n"
        
        keyboard = [
            [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"event_participants_{event_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", callback_data=f"manage_event_{event_id}")]
        ]
        
        await safe_edit_message(
            callback,
            stats_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {callback.data}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data.startswith("delete_event_"))
async def confirm_delete_event(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        event_id = int(callback.data.split("_")[2])
        
        async with async_session() as session:
            result = await session.execute(select(Event).where(Event.id == event_id))
            event = result.scalar_one_or_none()
            
            if not event:
                await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            # –°—á–∏—Ç–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants_result = await session.execute(
                select(func.count(EventRegistration.id)).where(EventRegistration.event_id == event_id)
            )
            participants_count = participants_result.scalar()
        
        warning_text = f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        warning_text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?\n\n"
        warning_text += f"üìÖ <b>{event.title}</b>\n"
        warning_text += f"üïê {event.date_time.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        warning_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n\n"
        warning_text += f"‚ùóÔ∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>\n"
        warning_text += f"–í—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
        
        await safe_edit_message(
            callback,
            warning_text,
            parse_mode="HTML",
            reply_markup=get_confirmation_keyboard("delete_event", event_id)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {callback.data}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("confirm_delete_event_"))
async def delete_event_confirmed(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        event_id = int(callback.data.split("_")[3])
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            event_result = await session.execute(select(Event).where(Event.id == event_id))
            event = event_result.scalar_one_or_none()
            
            if not event:
                await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            event_title = event.title
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            registrations_result = await session.execute(
                select(EventRegistration).where(EventRegistration.event_id == event_id)
            )
            registrations = registrations_result.scalars().all()
            
            for reg in registrations:
                await session.delete(reg)
            
            # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            await session.delete(event)
            await session.commit()
        
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} '{event_title}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        
        await safe_edit_message(
            callback,
            f"‚úÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>\n\n"
            f"üìÖ {event_title}\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(registrations)} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π",
            parse_mode="HTML",
            reply_markup=get_back_keyboard("my_created_events")
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {callback.data}: {e}")
        await safe_edit_message(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            reply_markup=get_back_keyboard("my_created_events")
        )

@router.callback_query(F.data.startswith("cancel_delete_event_"))
async def cancel_delete_event(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[3])
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
    callback.data = f"manage_event_{event_id}"
    await show_event_management_details(callback)

@router.callback_query(F.data.startswith("toggle_visibility_"))
async def toggle_event_visibility(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        event_id = int(callback.data.split("_")[2])
        
        async with async_session() as session:
            result = await session.execute(select(Event).where(Event.id == event_id))
            event = result.scalar_one_or_none()
            
            if not event:
                await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            event.is_visible = not event.is_visible
            event.updated_at = datetime.now()
            await session.commit()
        
        status = "–ø–æ–∫–∞–∑–∞–Ω–æ" if event.is_visible else "—Å–∫—Ä—ã—Ç–æ"
        icon = "üëÅ" if event.is_visible else "üôà"
        await callback.answer(f"{icon} –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        callback.data = f"manage_event_{event_id}"
        await show_event_management_details(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {callback.data}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("toggle_registration_"))
async def toggle_event_registration(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    try:
        event_id = int(callback.data.split("_")[2])
        
        async with async_session() as session:
            result = await session.execute(select(Event).where(Event.id == event_id))
            event = result.scalar_one_or_none()
            
            if not event:
                await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            event.registration_open = not event.registration_open
            event.updated_at = datetime.now()
            await session.commit()
        
        status = "–æ—Ç–∫—Ä—ã—Ç–∞" if event.registration_open else "–∑–∞–∫—Ä—ã—Ç–∞"
        icon = "üîì" if event.registration_open else "üîí"
        await callback.answer(f"{icon} –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        callback.data = f"manage_event_{event_id}"
        await show_event_management_details(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {callback.data}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("event_participants_"))
async def show_event_participants(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        event_id = int(callback.data.split("_")[2])
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            event_result = await session.execute(select(Event).where(Event.id == event_id))
            event = event_result.scalar_one_or_none()
            
            if not event:
                await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            participants_result = await session.execute(
                select(User, EventRegistration)
                .join(EventRegistration)
                .where(EventRegistration.event_id == event_id)
                .order_by(EventRegistration.registered_at)
            )
            participants_data = participants_result.all()
        
        if not participants_data:
            text = f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n"
            text += f"üìÖ <b>{event.title}</b>\n\n"
            text += "üòî –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è"
        else:
            text = f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n"
            text += f"üìÖ <b>{event.title}</b>\n\n"
            
            for i, (participant, registration) in enumerate(participants_data, 1):
                name = participant.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if participant.last_name:
                    name += f" {participant.last_name}"
                
                text += f"{i}. <b>{name}</b>"
                
                if participant.username:
                    text += f" (@{participant.username})"
                
                # –ì–æ—Ä–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                if participant.city:
                    city_icon = "üè¢" if participant.city == "–ú–æ—Å–∫–≤–∞" else "üïå"
                    text += f" {city_icon}"
                
                # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                reg_date = registration.registered_at.strftime('%d.%m')
                text += f" ‚Ä¢ {reg_date}"
                
                text += "\n"
            
            text += f"\nüìä <b>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {len(participants_data)}"
            if event.max_participants:
                percentage = (len(participants_data) / event.max_participants) * 100
                text += f"/{event.max_participants} ({percentage:.0f}%)"
        
        keyboard = [
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"event_stats_{event_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", callback_data=f"manage_event_{event_id}")]
        ]
        
        await safe_edit_message(
            callback,
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {callback.data}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", show_alert=True)

@router.callback_query(F.data == "manage_moderators")
async def show_moderator_management(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not await check_admin_only(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
        async with async_session() as session:
            admins_result = await session.execute(
                select(User).where(User.role == 'admin').order_by(User.first_name)
            )
            admins = admins_result.scalars().all()
            
            moderators_result = await session.execute(
                select(User).where(User.role == 'moderator').order_by(User.first_name)
            )
            moderators = moderators_result.scalars().all()
        
        text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</b>\n\n"
        
        text += f"üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ({len(admins)}):</b>\n"
        for admin in admins:
            name = admin.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if admin.username:
                name += f" (@{admin.username})"
            text += f"‚Ä¢ {name}\n"
        
        text += f"\nüõ° <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã ({len(moderators)}):</b>\n"
        if moderators:
            for mod in moderators:
                name = mod.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if mod.username:
                    name += f" (@{mod.username})"
                text += f"‚Ä¢ {name}\n"
        else:
            text += "–ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
        
        keyboard = [
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="add_moderator")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="remove_moderator")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_all_users")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        
        await safe_edit_message(
            callback,
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)

@router.callback_query(F.data.in_(["add_admin", "add_moderator", "remove_moderator"]))
async def start_manage_admin_action(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    if not await check_admin_only(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", show_alert=True)
        return
    
    action = callback.data
    
    await state.set_state(ManageAdminStates.action)
    await state.update_data(action=action)
    await state.set_state(ManageAdminStates.user_id)
    
    action_text = {
        "add_admin": "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "add_moderator": "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", 
        "remove_moderator": "—É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
    }
    
    await safe_edit_message(
        callback,
        f"üÜî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</b>\n\n"
        f"–î–ª—è {action_text[action]} –≤–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"üí° <i>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å @userinfobot</i>\n"
        f"üí° <i>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' –¥–ª—è –ø–æ–∏—Å–∫–∞</i>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_all_users")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_moderators")]
        ])
    )

@router.message(ManageAdminStates.user_id)
async def process_admin_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID",
            reply_markup=get_back_keyboard("manage_moderators")
        )
        return
    
    data = await state.get_data()
    action = data['action']
    
    try:
        async with async_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            result = await session.execute(select(User).where(User.telegram_id == user_id))
            user = result.scalar_one_or_none()
            
            if not user:
                await message.answer(
                    "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
                    parse_mode="HTML",
                    reply_markup=get_back_keyboard("manage_moderators")
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
            if user.telegram_id == message.from_user.id and action == "remove_moderator":
                await message.answer(
                    "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å —É —Å–∞–º–æ–≥–æ —Å–µ–±—è",
                    reply_markup=get_back_keyboard("manage_moderators")
                )
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            old_role = user.role
            
            if action == "add_admin":
                if user.role == 'admin':
                    await message.answer(
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user.first_name}</b> —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                        parse_mode="HTML",
                        reply_markup=get_back_keyboard("manage_moderators")
                    )
                    return
                user.role = 'admin'
                role_name = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                role_icon = "üëë"
            elif action == "add_moderator":
                if user.role in ['admin', 'moderator']:
                    await message.answer(
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user.first_name}</b> —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è {user.role}",
                        parse_mode="HTML",
                        reply_markup=get_back_keyboard("manage_moderators")
                    )
                    return
                user.role = 'moderator'
                role_name = "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
                role_icon = "üõ°"
            elif action == "remove_moderator":
                if user.role != 'moderator':
                    await message.answer(
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user.first_name}</b> –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º",
                        parse_mode="HTML",
                        reply_markup=get_back_keyboard("manage_moderators")
                    )
                    return
                user.role = 'user'
                role_name = "–æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                role_icon = "üë§"
            
            await session.commit()
        
        user_name = user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if user.username:
            user_name += f" (@{user.username})"
        
        success_text = f"‚úÖ <b>–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞</b>\n\n"
        success_text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\n"
        success_text += f"üîÑ <b>–ë—ã–ª–æ:</b> {old_role}\n"
        success_text += f"{role_icon} <b>–°—Ç–∞–ª–æ:</b> {user.role}\n"
        
        await message.answer(
            success_text,
            parse_mode="HTML",
            reply_markup=get_back_keyboard("manage_moderators")
        )
        
        logger.info(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –∏–∑–º–µ–Ω–µ–Ω–∞ —Å {old_role} –Ω–∞ {user.role} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏",
            reply_markup=get_back_keyboard("manage_moderators")
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "list_all_users")
async def show_all_users_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await check_admin_only(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", show_alert=True)
        return
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(
                select(User).order_by(User.role.desc(), User.first_name)
            )
            users = result.scalars().all()
        
        if not users:
            await safe_edit_message(
                callback,
                "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç",
                reply_markup=get_back_keyboard("manage_moderators")
            )
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        page_size = 20
        total_pages = (len(users) + page_size - 1) // page_size
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_users_page(callback.message, users, 0, total_pages)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)

async def show_users_page(message, users: list, page: int, total_pages: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    page_size = 20
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(users))
    page_users = users[start_idx:end_idx]
    
    text = f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
    text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages} (–≤—Å–µ–≥–æ: {len(users)})\n\n"
    
    role_icons = {
        'admin': 'üëë',
        'moderator': 'üõ°',
        'user': 'üë§'
    }
    
    for i, user in enumerate(page_users, start_idx + 1):
        name = user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if user.last_name:
            name += f" {user.last_name}"
        
        role_icon = role_icons.get(user.role, 'üë§')
        
        text += f"{i}. {role_icon} <b>{name}</b>"
        
        if user.username:
            text += f" (@{user.username})"
        
        text += f"\n   ID: <code>{user.telegram_id}</code>"
        
        if user.city:
            city_icon = "üè¢" if user.city == "–ú–æ—Å–∫–≤–∞" else "üïå"
            text += f" {city_icon} {user.city}"
        
        text += f" ‚Ä¢ {user.created_at.strftime('%d.%m.%Y')}\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if total_pages > 1:
        nav_row = []
        if page > 0:
            nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"users_page_{page-1}"))
        if page < total_pages - 1:
            nav_row.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"users_page_{page+1}"))
        if nav_row:
            keyboard.append(nav_row)
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="manage_moderators")])
    
    await message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.startswith("users_page_"))
async def navigate_users_page(callback: CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await check_admin_only(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", show_alert=True)
        return
    
    try:
        page = int(callback.data.split("_")[2])
        
        async with async_session() as session:
            result = await session.execute(
                select(User).order_by(User.role.desc(), User.first_name)
            )
            users = result.scalars().all()
        
        page_size = 20
        total_pages = (len(users) + page_size - 1) // page_size
        
        await show_users_page(callback.message, users, page, total_pages)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("broadcast_"))
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    target = callback.data.split("_")[1]
    
    target_names = {
        "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "moscow": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ú–æ—Å–∫–≤—ã",
        "kazan": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ö–∞–∑–∞–Ω–∏",
        "event": "—É—á–∞—Å—Ç–Ω–∏–∫–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
    }
    
    await state.set_state(BroadcastStates.target)
    await state.update_data(target=target)
    await state.set_state(BroadcastStates.message_text)
    
    await safe_edit_message(
        callback,
        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ {target_names.get(target, '–≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ')}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        f"üí° <i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞</i>\n"
        f"üí° <i>–ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤</i>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast")]
        ])
    )

@router.message(BroadcastStates.message_text)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if len(message.text) > 4000:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)",
            reply_markup=get_back_keyboard("broadcast")
        )
        return
    
    data = await state.get_data()
    target = data['target']
    
    await state.update_data(message_text=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    try:
        async with async_session() as session:
            if target == "all":
                result = await session.execute(select(func.count(User.id)))
            elif target == "moscow":
                result = await session.execute(
                    select(func.count(User.id)).where(User.city == "–ú–æ—Å–∫–≤–∞")
                )
            elif target == "kazan":
                result = await session.execute(
                    select(func.count(User.id)).where(User.city == "–ö–∞–∑–∞–Ω—å")
                )
            else:
                result = await session.execute(select(func.count(User.id)))
            
            recipients_count = result.scalar()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        recipients_count = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    target_names = {
        "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "moscow": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ú–æ—Å–∫–≤—ã",
        "kazan": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ö–∞–∑–∞–Ω–∏",
        "event": "—É—á–∞—Å—Ç–Ω–∏–∫–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
    }
    
    preview_text = message.text[:200] + "..." if len(message.text) > 200 else message.text
    
    confirmation_text = f"üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
    confirmation_text += f"üéØ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> {target_names.get(target)}\n"
    confirmation_text += f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {recipients_count}\n\n"
    confirmation_text += f"üìù <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n"
    confirmation_text += f"<i>{preview_text}</i>\n\n"
    confirmation_text += f"‚ùì –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?"
    
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast")]
    ]
    
    await message.answer(
        confirmation_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data == "confirm_broadcast")
async def execute_broadcast(callback: CallbackQuery, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    data = await state.get_data()
    target = data['target']
    message_text = data['message_text']
    
    await safe_edit_message(
        callback,
        "üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...</b>\n\n"
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML"
    )
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            if target == "all":
                result = await session.execute(select(User))
            elif target == "moscow":
                result = await session.execute(select(User).where(User.city == "–ú–æ—Å–∫–≤–∞"))
            elif target == "kazan":
                result = await session.execute(select(User).where(User.city == "–ö–∞–∑–∞–Ω—å"))
            else:
                result = await session.execute(select(User))
            
            recipients = result.scalars().all()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        success_count = 0
        error_count = 0
        
        for user in recipients:
            try:
                await callback.bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n{message_text}",
                    parse_mode="HTML"
                )
                success_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                if success_count % 30 == 0:
                    await asyncio.sleep(1)
                    
            except Exception as e:
                error_count += 1
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
        
        result_text = f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
        result_text += f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        if error_count > 0:
            result_text += f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
        result_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipients)}"
        
        await safe_edit_message(
            callback,
            result_text,
            parse_mode="HTML",
            reply_markup=get_back_keyboard("broadcast")
        )
        
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await safe_edit_message(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏",
            reply_markup=get_back_keyboard("broadcast")
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "user_questions")
async def show_user_questions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ —Ç–∞–±–ª–∏—Ü–∞ questions
    await safe_edit_message(
        callback,
        "‚ùì <b>–í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        "üöß –§—É–Ω–∫—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.\n\n"
        "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º",
        parse_mode="HTML",
        reply_markup=get_back_keyboard("admin_panel")
    )
    
    try:
        field_names = {
            'title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'location': '–ú–µ—Å—Ç–æ',
            'city': '–ì–æ—Ä–æ–¥',
            'datetime': '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è',
            'limit': '–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
        }
        
        new_display_value = new_value
        if field == 'description' and new_value == '-':
            new_display_value = "–£–¥–∞–ª–µ–Ω–æ"
        elif field == 'location' and new_value == '-':
            new_display_value = "–£–¥–∞–ª–µ–Ω–æ"
        elif field == 'limit' and new_value == '-':
            new_display_value = "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
        elif field == 'datetime':
            new_display_value = datetime_obj.strftime('%d.%m.%Y –≤ %H:%M')
        
        success_text = f"‚úÖ <b>–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n"
        success_text += f"üìÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event.title}\n"
        success_text += f"üîß <b>–ü–æ–ª–µ:</b> {field_names.get(field)}\n"
        success_text += f"üìù <b>–ë—ã–ª–æ:</b> {old_value}\n"
        success_text += f"‚ú® <b>–°—Ç–∞–ª–æ:</b> {new_display_value}"
        
        await message.answer(
            success_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_event_{event_id}")],
                [InlineKeyboardButton(text="üìã –ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", callback_data=f"manage_event_{event_id}")]
            ])
        )
        
        logger.info(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}: {field} = {new_value}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏",
            reply_markup=get_back_keyboard(f"manage_event_{event_id}")
        )
    finally:
        await state.clear()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@router.callback_query(F.data == "all_events_manage")
async def show_all_events_for_management(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∞–¥–º–∏–Ω—ã/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            result = await session.execute(
                select(Event).order_by(Event.date_time.desc())
            )
            events = result.scalars().all()
        
        if not events:
            await safe_edit_message(
                callback,
                "üìÖ <b>–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n"
                "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
                parse_mode="HTML",
                reply_markup=get_back_keyboard("manage_events")
            )
            return
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ
        now = datetime.now()
        upcoming = [e for e in events if e.date_time > now]
        past = [e for e in events if e.date_time <= now]
        
        text = f"üìÖ <b>–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n"
        text += f"üîú –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: {len(upcoming)}\n"
        text += f"‚úÖ –ü—Ä–æ—à–µ–¥—à–∏—Ö: {len(past)}\n"
        text += f"üìä –í—Å–µ–≥–æ: {len(events)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:"
        
        await safe_edit_message(
            callback,
            text,
            parse_mode="HTML",
            reply_markup=build_events_list_keyboard(events, "manage_event")
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
@router.callback_query(F.data == "export_data")
async def export_data_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if not await check_admin_only(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", show_alert=True)
        return
    
    keyboard = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="export_participants")],
        [InlineKeyboardButton(text="üìÖ –û—Ç—á–µ—Ç –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", callback_data="export_events")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="export_users")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    await safe_edit_message(
        callback,
        "üìã <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.startswith("export_"))
async def generate_export(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if not await check_admin_only(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", show_alert=True)
        return
    
    export_type = callback.data.split("_")[1]
    
    await safe_edit_message(
        callback,
        "üìä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...</b>\n\n"
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML"
    )
    
    try:
        async with async_session() as session:
            if export_type == "participants":
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                result = await session.execute(
                    select(Event, func.count(EventRegistration.id).label('participants_count'))
                    .outerjoin(EventRegistration)
                    .group_by(Event.id)
                    .order_by(Event.date_time.desc())
                )
                events_data = result.all()
                
                report = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º</b>\n\n"
                
                total_events = len(events_data)
                total_registrations = sum(data.participants_count for data in events_data)
                
                report += f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                report += f"‚Ä¢ –í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {total_events}\n"
                report += f"‚Ä¢ –í—Å–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {total_registrations}\n"
                report += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {total_registrations/total_events:.1f}\n\n"
                
                report += f"üìÖ <b>–ü–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º:</b>\n"
                for event, count in events_data[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 10
                    status = "üîú" if event.date_time > datetime.now() else "‚úÖ"
                    report += f"{status} {event.title[:30]}...\n"
                    report += f"   üë• {count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Ä¢ {event.date_time.strftime('%d.%m.%Y')}\n"
                
                if len(events_data) > 10:
                    report += f"\n... –∏ –µ—â–µ {len(events_data) - 10} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
                
            elif export_type == "events":
                # –û—Ç—á–µ—Ç –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º
                events_result = await session.execute(select(Event).order_by(Event.date_time.desc()))
                events = events_result.scalars().all()
                
                now = datetime.now()
                upcoming = [e for e in events if e.date_time > now and e.is_visible]
                past = [e for e in events if e.date_time <= now]
                hidden = [e for e in events if not e.is_visible]
                
                report = "üìÖ <b>–û—Ç—á–µ—Ç –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º</b>\n\n"
                report += f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                report += f"‚Ä¢ –í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {len(events)}\n"
                report += f"‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: {len(upcoming)}\n"
                report += f"‚Ä¢ –ü—Ä–æ—à–µ–¥—à–∏—Ö: {len(past)}\n"
                report += f"‚Ä¢ –°–∫—Ä—ã—Ç—ã—Ö: {len(hidden)}\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
                moscow_events = [e for e in events if e.city == "–ú–æ—Å–∫–≤–∞"]
                kazan_events = [e for e in events if e.city == "–ö–∞–∑–∞–Ω—å"]
                
                report += f"üèôÔ∏è <b>–ü–æ –≥–æ—Ä–æ–¥–∞–º:</b>\n"
                report += f"‚Ä¢ –ú–æ—Å–∫–≤–∞: {len(moscow_events)}\n"
                report += f"‚Ä¢ –ö–∞–∑–∞–Ω—å: {len(kazan_events)}\n\n"
                
                # –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                if upcoming:
                    report += f"üîú <b>–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n"
                    for event in upcoming[:5]:
                        days_until = (event.date_time - now).days
                        report += f"‚Ä¢ {event.title[:25]}...\n"
                        report += f"  üìÖ {event.date_time.strftime('%d.%m.%Y')} (—á–µ—Ä–µ–∑ {days_until} –¥–Ω.)\n"
                
            elif export_type == "users":
                # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users_result = await session.execute(
                    select(User).order_by(User.created_at.desc())
                )
                users = users_result.scalars().all()
                
                admins = [u for u in users if u.role == 'admin']
                moderators = [u for u in users if u.role == 'moderator']
                regular_users = [u for u in users if u.role == 'user']
                
                moscow_users = [u for u in users if u.city == "–ú–æ—Å–∫–≤–∞"]
                kazan_users = [u for u in users if u.city == "–ö–∞–∑–∞–Ω—å"]
                no_city_users = [u for u in users if not u.city]
                
                report = "üë• <b>–û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n\n"
                report += f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                report += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                report += f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admins)}\n"
                report += f"‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(moderators)}\n"
                report += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(regular_users)}\n\n"
                
                report += f"üèôÔ∏è <b>–ü–æ –≥–æ—Ä–æ–¥–∞–º:</b>\n"
                report += f"‚Ä¢ –ú–æ—Å–∫–≤–∞: {len(moscow_users)}\n"
                report += f"‚Ä¢ –ö–∞–∑–∞–Ω—å: {len(kazan_users)}\n"
                report += f"‚Ä¢ –ë–µ–∑ –≥–æ—Ä–æ–¥–∞: {len(no_city_users)}\n\n"
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                recent_users = users[:10]
                report += f"üÜï <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n"
                for user in recent_users:
                    name = user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    date = user.created_at.strftime('%d.%m.%Y')
                    report += f"‚Ä¢ {name} ‚Ä¢ {date}\n"
        
        await safe_edit_message(
            callback,
            report,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"export_{export_type}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É", callback_data="export_data")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ {export_type}: {e}")
        await safe_edit_message(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞",
            reply_markup=get_back_keyboard("export_data")
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.callback_query(F.data == "admin_panel")
async def cancel_any_state(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await state.clear()
    await show_admin_panel_callback(callback)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_state_message(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await state.clear()
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_back_keyboard("admin_panel")
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö admin —Ñ—É–Ω–∫—Ü–∏–π
@router.callback_query(F.data.startswith("error_"))
async def handle_admin_error(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    await show_admin_panel_callback(callback)