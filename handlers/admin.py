from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from database.database import async_session
from database.models import User, Event, EventRegistration
from keyboards.keyboards import (
    get_admin_panel_keyboard, get_event_management_keyboard,
    get_broadcast_keyboard, get_confirmation_keyboard,
    build_events_list_keyboard, get_back_keyboard, get_cancel_keyboard
)
from datetime import datetime, timedelta
import re

router = Router()

class CreateEventStates(StatesGroup):
    title = State()
    description = State()
    location = State()
    city = State()
    date_time = State()
    max_participants = State()
    registration_required = State()
    media = State()

class EditEventStates(StatesGroup):
    event_id = State()
    field = State()
    value = State()

class ManageAdminStates(StatesGroup):
    action = State()
    user_id = State()

async def check_admin_or_moderator(telegram_id: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        
        if not user or user.role not in ['admin', 'moderator']:
            return False, 'user'
        
        return True, user.role

@router.message(F.text == "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
async def show_admin_panel(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    has_access, role = await check_admin_or_moderator(message.from_user.id)
    
    if not has_access:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return
    
    await message.answer(
        f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ({'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if role == 'admin' else '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'}):",
        reply_markup=get_admin_panel_keyboard(role)
    )

@router.callback_query(F.data == "admin_panel")
async def show_admin_panel_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ callback"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ({'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if role == 'admin' else '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'}):",
        reply_markup=get_admin_panel_keyboard(role)
    )

@router.callback_query(F.data == "create_event")
async def start_create_event(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await state.set_state(CreateEventStates.title)
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(CreateEventStates.title)
async def process_event_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await state.update_data(title=message.text)
    await state.set_state(CreateEventStates.description)
    
    await message.answer(
        "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=get_cancel_keyboard()
    )

@router.message(CreateEventStates.description)
async def process_event_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    description = None if message.text == '-' else message.text
    await state.update_data(description=description)
    await state.set_state(CreateEventStates.location)
    
    await message.answer(
        "üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=get_cancel_keyboard()
    )

@router.message(CreateEventStates.location)
async def process_event_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"""
    location = None if message.text == '-' else message.text
    await state.update_data(location=location)
    await state.set_state(CreateEventStates.city)
    
    await message.answer(
        "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:\n"
        "1 - –ú–æ—Å–∫–≤–∞\n"
        "2 - –ö–∞–∑–∞–Ω—å",
        reply_markup=get_cancel_keyboard()
    )

@router.message(CreateEventStates.city)
async def process_event_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    if message.text == "1":
        city = "–ú–æ—Å–∫–≤–∞"
    elif message.text == "2":
        city = "–ö–∞–∑–∞–Ω—å"
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 (–ú–æ—Å–∫–≤–∞) –∏–ª–∏ 2 (–ö–∞–∑–∞–Ω—å)",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(city=city)
    await state.set_state(CreateEventStates.date_time)
    
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 18:30",
        reply_markup=get_cancel_keyboard()
    )

@router.message(CreateEventStates.date_time)
async def process_event_datetime(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        datetime_obj = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if datetime_obj <= datetime.now():
            await message.answer(
                "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard()
            )
            return
        
        await state.update_data(date_time=datetime_obj)
        await state.set_state(CreateEventStates.max_participants)
        
        await message.answer(
            "üë• –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞):",
            reply_markup=get_cancel_keyboard()
        )
        
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 18:30",
            reply_markup=get_cancel_keyboard()
        )

@router.message(CreateEventStates.max_participants)
async def process_event_max_participants(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    max_participants = None
    
    if message.text != '-':
        try:
            max_participants = int(message.text)
            if max_participants <= 0:
                await message.answer(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º:",
                    reply_markup=get_cancel_keyboard()
                )
                return
        except ValueError:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '-' –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:",
                reply_markup=get_cancel_keyboard()
            )
            return
    
    await state.update_data(max_participants=max_participants)
    await state.set_state(CreateEventStates.registration_required)
    
    await message.answer(
        "‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?\n"
        "1 - –î–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "2 - –ù–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞",
        reply_markup=get_cancel_keyboard()
    )

@router.message(CreateEventStates.registration_required)
async def process_event_registration_required(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if message.text == "1":
        registration_required = True
    elif message.text == "2":
        registration_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 (–î–∞) –∏–ª–∏ 2 (–ù–µ—Ç)",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(registration_required=registration_required)
    await state.set_state(CreateEventStates.media)
    
    await message.answer(
        "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=get_cancel_keyboard()
    )

@router.message(CreateEventStates.media)
async def process_event_media(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    photo_file_id = None
    video_file_id = None
    media_type = None
    
    if message.text and message.text == '-':
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞
        pass
    elif message.photo:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ñ–æ—Ç–æ
        photo_file_id = message.photo[-1].file_id
        media_type = 'photo'
    elif message.video:
        video_file_id = message.video.file_id
        media_type = 'video'
    elif message.text != '-':
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        creator = result.scalar_one_or_none()
        
        if not creator:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event = Event(
            title=data['title'],
            description=data['description'],
            location=data['location'],
            city=data['city'],
            date_time=data['date_time'],
            creator_id=creator.id,
            max_participants=data['max_participants'],
            registration_required=data['registration_required'],
            photo_file_id=photo_file_id,
            video_file_id=video_file_id,
            media_type=media_type
        )
        
        session.add(event)
        await session.commit()
        await session.refresh(event)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary = f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
    summary += f"üìÖ <b>{event.title}</b>\n"
    summary += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    summary += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {event.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    summary += f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {event.city}\n"
    summary += f"üïê <b>–î–∞—Ç–∞:</b> {event.date_time.strftime('%d.%m.%Y –≤ %H:%M')}\n"
    summary += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {'–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ' if not event.max_participants else event.max_participants}\n"
    summary += f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if event.registration_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    summary += f"üì∏ <b>–ú–µ–¥–∏–∞:</b> {'–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if media_type else '–ù–µ—Ç'}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if photo_file_id:
        await message.answer_photo(
            photo=photo_file_id,
            caption=summary,
            parse_mode="HTML",
            reply_markup=get_back_keyboard("admin_panel")
        )
    elif video_file_id:
        await message.answer_video(
            video=video_file_id,
            caption=summary,
            parse_mode="HTML",
            reply_markup=get_back_keyboard("admin_panel")
        )
    else:
        await message.answer(
            summary,
            parse_mode="HTML",
            reply_markup=get_back_keyboard("admin_panel")
        )
    
    await state.clear()

@router.callback_query(F.data == "manage_events")
async def show_event_management(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:",
        reply_markup=get_event_management_keyboard()
    )

@router.callback_query(F.data == "my_created_events")
async def show_my_created_events(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        events_result = await session.execute(
            select(Event)
            .where(Event.creator_id == user.id)
            .order_by(Event.date_time)
        )
        events = events_result.scalars().all()
    
    if not events:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
            reply_markup=get_back_keyboard("manage_events")
        )
        return
    
    await callback.message.edit_text(
        "–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=build_events_list_keyboard(events, "manage_event")
    )

@router.callback_query(F.data == "broadcast")
async def show_broadcast_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
        reply_markup=get_broadcast_keyboard()
    )

@router.callback_query(F.data.startswith("broadcast_"))
async def handle_broadcast_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    broadcast_type = callback.data.split("_")[1]
    
    type_names = {
        "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "moscow": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ú–æ—Å–∫–≤—ã",
        "kazan": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ö–∞–∑–∞–Ω–∏",
        "event": "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
    }
    
    await callback.message.edit_text(
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ {type_names.get(broadcast_type, '–≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ')} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ",
        reply_markup=get_back_keyboard("broadcast")
    )

@router.callback_query(F.data == "user_questions")
async def show_user_questions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞)"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚ùì –§—É–Ω–∫—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ",
        reply_markup=get_back_keyboard("admin_panel")
    )

@router.callback_query(F.data.startswith("manage_event_"))
async def show_event_management_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º"""
    event_id = int(callback.data.split("_")[2])
    
    async with async_session() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one_or_none()
        
        if not event:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        user_result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = user_result.scalar_one_or_none()
        
        if not user or (user.role not in ['admin', 'moderator'] and user.id != event.creator_id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º", show_alert=True)
            return
        
        # –°—á–∏—Ç–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_result = await session.execute(
            select(EventRegistration).where(EventRegistration.event_id == event_id)
        )
        participants_count = len(participants_result.scalars().all())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    event_text = f"üìÖ <b>{event.title}</b>\n\n"
    event_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    event_text += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {event.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    event_text += f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {event.city}\n"
    event_text += f"üïê <b>–î–∞—Ç–∞:</b> {event.date_time.strftime('%d.%m.%Y –≤ %H:%M')}\n"
    event_text += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {participants_count}"
    if event.max_participants:
        event_text += f"/{event.max_participants}"
    event_text += "\n"
    event_text += f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if event.registration_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    event_text += f"üëÅ <b>–í–∏–¥–∏–º–æ—Å—Ç—å:</b> {'–í–∏–¥–∏–º–æ' if event.is_visible else '–°–∫—Ä—ã—Ç–æ'}\n"
    event_text += f"üîì <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {'–û—Ç–∫—Ä—ã—Ç–∞' if event.registration_open else '–ó–∞–∫—Ä—ã—Ç–∞'}\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_event_{event_id}")],
        [InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"event_participants_{event_id}")],
        [
            InlineKeyboardButton(
                text="üëÅ –°–∫—Ä—ã—Ç—å" if event.is_visible else "üëÅ –ü–æ–∫–∞–∑–∞—Ç—å", 
                callback_data=f"toggle_visibility_{event_id}"
            ),
            InlineKeyboardButton(
                text="üîí –ó–∞–∫—Ä—ã—Ç—å —Ä–µ–≥." if event.registration_open else "üîì –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–≥.", 
                callback_data=f"toggle_registration_{event_id}"
            )
        ],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_event_{event_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_created_events")]
    ]
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if event.photo_file_id:
        await callback.message.answer_photo(
            photo=event.photo_file_id,
            caption=event_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.message.delete()
    elif event.video_file_id:
        await callback.message.answer_video(
            video=event.video_file_id,
            caption=event_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.message.delete()
    else:
        await callback.message.edit_text(
            event_text,
            parse_mode="HTML",
            reply_markup=markup
        )

@router.callback_query(F.data.startswith("delete_event_"))
async def confirm_delete_event(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[2])
    
    async with async_session() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one_or_none()
        
        if not event:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?\n\n"
        f"üìÖ <b>{event.title}</b>\n"
        f"üïê {event.date_time.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
        f"‚ùóÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        parse_mode="HTML",
        reply_markup=get_confirmation_keyboard("delete_event", event_id)
    )

@router.callback_query(F.data.startswith("confirm_delete_event_"))
async def delete_event_confirmed(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[3])
    
    async with async_session() as session:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await session.execute(
            select(EventRegistration).where(EventRegistration.event_id == event_id)
        )
        registrations = await session.execute(
            select(EventRegistration).where(EventRegistration.event_id == event_id)
        )
        for reg in registrations.scalars().all():
            await session.delete(reg)
        
        # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event_result = await session.execute(select(Event).where(Event.id == event_id))
        event = event_result.scalar_one_or_none()
        
        if event:
            await session.delete(event)
            await session.commit()
    
    await callback.message.edit_text(
        "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
        reply_markup=get_back_keyboard("my_created_events")
    )

@router.callback_query(F.data.startswith("cancel_delete_event_"))
async def cancel_delete_event(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[3])
    await show_event_management_details(callback)

@router.callback_query(F.data.startswith("toggle_visibility_"))
async def toggle_event_visibility(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[2])
    
    async with async_session() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one_or_none()
        
        if not event:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        event.is_visible = not event.is_visible
        await session.commit()
    
    status = "–ø–æ–∫–∞–∑–∞–Ω–æ" if event.is_visible else "—Å–∫—Ä—ã—Ç–æ"
    await callback.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {status}")
    await show_event_management_details(callback)

@router.callback_query(F.data.startswith("toggle_registration_"))
async def toggle_event_registration(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    event_id = int(callback.data.split("_")[2])
    
    async with async_session() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one_or_none()
        
        if not event:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        event.registration_open = not event.registration_open
        await session.commit()
    
    status = "–æ—Ç–∫—Ä—ã—Ç–∞" if event.registration_open else "–∑–∞–∫—Ä—ã—Ç–∞"
    await callback.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {status}")
    await show_event_management_details(callback)

@router.callback_query(F.data.startswith("event_participants_"))
async def show_event_participants(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[2])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event_result = await session.execute(select(Event).where(Event.id == event_id))
        event = event_result.scalar_one_or_none()
        
        if not event:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_result = await session.execute(
            select(User)
            .join(EventRegistration)
            .where(EventRegistration.event_id == event_id)
            .order_by(EventRegistration.registered_at)
        )
        participants = participants_result.scalars().all()
    
    if not participants:
        text = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{event.title}</b>\n\n"
        text += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è üòî"
    else:
        text = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{event.title}</b>\n\n"
        for i, participant in enumerate(participants, 1):
            name = participant.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if participant.last_name:
                name += f" {participant.last_name}"
            if participant.username:
                name += f" (@{participant.username})"
            text += f"{i}. {name}\n"
        
        text += f"\nüìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}"
        if event.max_participants:
            text += f"/{event.max_participants}"
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_back_keyboard(f"manage_event_{event_id}")
    )

@router.callback_query(F.data == "manage_moderators")
async def show_moderator_management(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    has_access, role = await check_admin_or_moderator(callback.from_user.id)
    
    if not has_access or role != 'admin':
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    async with async_session() as session:
        result = await session.execute(select(User).where(User.role == 'moderator'))
        moderators = result.scalars().all()
        
        admin_result = await session.execute(select(User).where(User.role == 'admin'))
        admins = admin_result.scalars().all()
    
    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</b>\n\n"
    
    text += f"üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ({len(admins)}):</b>\n"
    for admin in admins:
        name = admin.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if admin.username:
            name += f" (@{admin.username})"
        text += f"‚Ä¢ {name}\n"
    
    text += f"\nüõ° <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã ({len(moderators)}):</b>\n"
    if moderators:
        for mod in moderators:
            name = mod.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if mod.username:
                name += f" (@{mod.username})"
            text += f"‚Ä¢ {name}\n"
    else:
        text += "–ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
    
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="add_moderator")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="remove_moderator")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.in_(["add_admin", "add_moderator", "remove_moderator"]))
async def start_manage_admin_action(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    action = callback.data
    
    await state.set_state(ManageAdminStates.action)
    await state.update_data(action=action)
    await state.set_state(ManageAdminStates.user_id)
    
    action_text = {
        "add_admin": "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "add_moderator": "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", 
        "remove_moderator": "—É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
    }
    
    await callback.message.edit_text(
        f"üÜî –î–ª—è {action_text[action]} –≤–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"üí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å @userinfobot",
        reply_markup=get_back_keyboard("manage_moderators")
    )

@router.message(ManageAdminStates.user_id)
async def process_admin_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID")
        return
    
    data = await state.get_data()
    action = data['action']
    
    async with async_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action == "add_admin":
            if user.role == 'admin':
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                return
            user.role = 'admin'
            role_name = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        elif action == "add_moderator":
            if user.role in ['admin', 'moderator']:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è {user.role}")
                return
            user.role = 'moderator'
            role_name = "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
        elif action == "remove_moderator":
            if user.role != 'moderator':
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
                return
            user.role = 'user'
            role_name = "–æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        
        await session.commit()
    
    user_name = user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if user.username:
        user_name += f" (@{user.username})"
    
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è {role_name}",
        reply_markup=get_back_keyboard("manage_moderators")
    )
    
    await state.clear()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.callback_query(F.data == "admin_panel")
async def cancel_any_state(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await state.clear()
    await show_admin_panel_callback(callback)