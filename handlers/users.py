from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from database.database import async_session
from database.models import User, Event, EventRegistration
from keyboards.keyboards import (
    get_main_menu, get_cities_keyboard, get_events_keyboard,
    get_event_actions_keyboard, build_events_list_keyboard
)
from datetime import datetime
import os

router = Router()

async def get_or_create_user(telegram_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        
        if not user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–º –∞–¥–º–∏–Ω–æ–º
            admin_id = os.getenv('ADMIN_ID')
            role = 'admin' if admin_id and str(telegram_id) == admin_id else 'user'
            
            user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                role=role
            )
            session.add(user)
            await session.commit()
            await session.refresh(user)
        
        return user

@router.message(Command("start"))
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üéâ\n\n"
    
    if user.role == 'admin':
        welcome_text += "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.\n"
    elif user.role == 'moderator':
        welcome_text += "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.\n"
    
    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu(user.role)
    )

@router.message(F.text == "üèôÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")
async def select_city(message: Message):
    """–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        reply_markup=get_cities_keyboard()
    )

@router.callback_query(F.data.startswith("city_"))
async def handle_city_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    city_code = callback.data.split("_")[1]
    city_name = "–ú–æ—Å–∫–≤–∞" if city_code == "moscow" else "–ö–∞–∑–∞–Ω—å"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if user:
            user.city = city_name
            await session.commit()
    
    await callback.message.edit_text(
        f"–í–∞—à –≥–æ—Ä–æ–¥: {city_name} ‚úÖ\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.",
        reply_markup=get_cities_keyboard()
    )

@router.message(F.text == "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def show_events_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        user_city = user.city if user else None
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=get_events_keyboard(user_city)
    )

@router.callback_query(F.data == "all_events")
async def show_all_events(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    async with async_session() as session:
        result = await session.execute(
            select(Event)
            .where(Event.is_visible == True, Event.date_time > datetime.now())
            .order_by(Event.date_time)
        )
        events = result.scalars().all()
    
    if not events:
        await callback.message.edit_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π üòî",
            reply_markup=get_events_keyboard()
        )
        return
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:",
        reply_markup=build_events_list_keyboard(events)
    )

@router.callback_query(F.data.startswith("events_city_"))
async def show_city_events(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –≥–æ—Ä–æ–¥—É"""
    city = callback.data.split("_")[-1]
    city_name = "–ú–æ—Å–∫–≤–∞" if city == "moscow" else "–ö–∞–∑–∞–Ω—å"
    
    async with async_session() as session:
        result = await session.execute(
            select(Event)
            .where(
                Event.is_visible == True,
                Event.city == city_name,
                Event.date_time > datetime.now()
            )
            .order_by(Event.date_time)
        )
        events = result.scalars().all()
    
    if not events:
        await callback.message.edit_text(
            f"–í –≥–æ—Ä–æ–¥–µ {city_name} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π üòî",
            reply_markup=get_events_keyboard(city_name)
        )
        return
    
    await callback.message.edit_text(
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ {city_name}:",
        reply_markup=build_events_list_keyboard(events)
    )

@router.callback_query(F.data == "my_events")
async def show_my_events(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)"""
    async with async_session() as session:
        result = await session.execute(
            select(Event)
            .join(EventRegistration)
            .join(User)
            .where(
                User.telegram_id == callback.from_user.id,
                Event.date_time > datetime.now()
            )
            .order_by(Event.date_time)
        )
        events = result.scalars().all()
    
    if not events:
        await callback.message.edit_text(
            "–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üòî",
            reply_markup=get_events_keyboard()
        )
        return
    
    await callback.message.edit_text(
        "–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=build_events_list_keyboard(events)
    )

@router.callback_query(F.data.startswith("event_"))
async def show_event_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one_or_none()
        
        if not event:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        reg_result = await session.execute(
            select(EventRegistration)
            .join(User)
            .where(
                User.telegram_id == callback.from_user.id,
                EventRegistration.event_id == event_id
            )
        )
        is_registered = reg_result.scalar_one_or_none() is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
        creator_result = await session.execute(
            select(User)
            .where(
                User.telegram_id == callback.from_user.id,
                User.id == event.creator_id
            )
        )
        is_creator = creator_result.scalar_one_or_none() is not None
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_result = await session.execute(
            select(EventRegistration).where(EventRegistration.event_id == event_id)
        )
        participants_count = len(participants_result.scalars().all())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    event_text = f"üìÖ <b>{event.title}</b>\n\n"
    event_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    event_text += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {event.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    event_text += f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {event.city}\n"
    event_text += f"üïê <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {event.date_time.strftime('%d.%m.%Y –≤ %H:%M')}\n"
    
    if event.max_participants:
        event_text += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {participants_count}/{event.max_participants}\n"
    else:
        event_text += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {participants_count}\n"
    
    if event.registration_required:
        if event.registration_open:
            event_text += "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞</b>\n"
        else:
            event_text += "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞</b>\n"
    else:
        event_text += "üÜì <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if event.photo_file_id:
        await callback.message.answer_photo(
            photo=event.photo_file_id,
            caption=event_text,
            parse_mode="HTML",
            reply_markup=get_event_actions_keyboard(event_id, is_registered, is_creator)
        )
        await callback.message.delete()
    elif event.video_file_id:
        await callback.message.answer_video(
            video=event.video_file_id,
            caption=event_text,
            parse_mode="HTML",
            reply_markup=get_event_actions_keyboard(event_id, is_registered, is_creator)
        )
        await callback.message.delete()
    else:
        await callback.message.edit_text(
            event_text,
            parse_mode="HTML",
            reply_markup=get_event_actions_keyboard(event_id, is_registered, is_creator)
        )

@router.callback_query(F.data.startswith("register_"))
async def register_for_event(callback: CallbackQuery):
    """–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    event_id = int(callback.data.split("_")[1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = user_result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event_result = await session.execute(select(Event).where(Event.id == event_id))
        event = event_result.scalar_one_or_none()
        
        if not event or not user:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
        existing_reg = await session.execute(
            select(EventRegistration).where(
                EventRegistration.user_id == user.id,
                EventRegistration.event_id == event_id
            )
        )
        
        if existing_reg.scalar_one_or_none():
            await callback.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if event.max_participants:
            current_count = await session.execute(
                select(EventRegistration).where(EventRegistration.event_id == event_id)
            )
            if len(current_count.scalars().all()) >= event.max_participants:
                await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", show_alert=True)
                return
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        registration = EventRegistration(user_id=user.id, event_id=event_id)
        session.add(registration)
        await session.commit()
    
    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! ‚úÖ")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    await show_event_details(callback)

@router.callback_query(F.data.startswith("unregister_"))
async def unregister_from_event(callback: CallbackQuery):
    """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        reg_result = await session.execute(
            select(EventRegistration).where(
                EventRegistration.user_id == user.id,
                EventRegistration.event_id == event_id
            )
        )
        registration = reg_result.scalar_one_or_none()
        
        if not registration:
            await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", show_alert=True)
            return
        
        await session.delete(registration)
        await session.commit()
    
    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    await show_event_details(callback)

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        role = user.role if user else 'user'
    
    await callback.message.delete()
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu(role)
    )

@router.callback_query(F.data == "back_to_events")
async def back_to_events(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        user_city = user.city if user else None
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=get_events_keyboard(user_city)
    )

@router.message(F.text == "üí∞ –î–æ–Ω–∞—Ç")
async def donate_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–Ω–∞—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(
        "üí∞ –§—É–Ω–∫—Ü–∏—è –¥–æ–Ω–∞—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç! ‚ù§Ô∏è"
    )

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_user_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        events_created_result = await session.execute(
            select(Event).where(Event.creator_id == user.id)
        )
        events_created = len(events_created_result.scalars().all())
        
        events_registered_result = await session.execute(
            select(EventRegistration)
            .join(User)
            .where(User.telegram_id == message.from_user.id)
        )
        events_registered = len(events_registered_result.scalars().all())
        
        # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        upcoming_events_result = await session.execute(
            select(Event)
            .join(EventRegistration)
            .join(User)
            .where(
                User.telegram_id == message.from_user.id,
                Event.date_time > datetime.now()
            )
        )
        upcoming_events = len(upcoming_events_result.scalars().all())
    
    role_names = {
        'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', 
        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    }
    
    profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    profile_text += f"üîπ <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    if user.last_name:
        profile_text += f" {user.last_name}"
    profile_text += "\n"
    
    if user.username:
        profile_text += f"üîπ <b>Username:</b> @{user.username}\n"
    
    profile_text += f"üîπ <b>–†–æ–ª—å:</b> {role_names.get(user.role, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    profile_text += f"üîπ <b>–ì–æ—Ä–æ–¥:</b> {user.city or '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n"
    profile_text += f"üîπ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.created_at.strftime('%d.%m.%Y')}\n\n"
    
    profile_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    if user.role in ['moderator', 'admin']:
        profile_text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {events_created}\n"
    profile_text += f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {events_registered}\n"
    profile_text += f"‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {upcoming_events}\n"
    
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_profile_name")],
        [InlineKeyboardButton(text="üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="edit_profile_city")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    await message.answer(
        profile_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question_handler(message: Message):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(
        "‚ùì –§—É–Ω–∫—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–ø—Ä—è–º—É—é."
    )

@router.callback_query(F.data == "edit_profile_name")
async def edit_profile_name(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.message.edit_text(
        "‚úèÔ∏è –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ",
        reply_markup=get_back_keyboard("back_to_menu")
    )

@router.callback_query(F.data == "edit_profile_city")
async def edit_profile_city(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
    await callback.message.edit_text(
        "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        reply_markup=get_cities_keyboard()
    )