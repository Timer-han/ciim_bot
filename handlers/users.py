from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from database.database import async_session
from database.models import User, Event, EventRegistration
from keyboards.keyboards import (
    get_main_menu, get_cities_keyboard, get_events_keyboard,
    get_event_actions_keyboard, build_events_list_keyboard,
    get_back_keyboard, get_next_event_keyboard,
    get_no_events_keyboard
)
from datetime import datetime
import os

router = Router()

class ProfileStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    waiting_for_name = State()

async def get_or_create_user(telegram_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        
        if not user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–º –∞–¥–º–∏–Ω–æ–º
            admin_id = os.getenv('ADMIN_ID')
            role = 'admin' if admin_id and str(telegram_id) == admin_id else 'user'
            
            user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                role=role
            )
            session.add(user)
            await session.commit()
            await session.refresh(user)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
            user.username = username
            user.first_name = first_name
            user.last_name = last_name
            await session.commit()
        
        return user

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None, parse_mode="HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ"""
    try:
        await callback.message.edit_text(
            text,
            parse_mode=parse_mode,
            reply_markup=reply_markup
        )
    except Exception:
        try:
            await callback.message.delete()
        except Exception:
            pass
        
        await callback.message.answer(
            text,
            parse_mode=parse_mode,
            reply_markup=reply_markup
        )

async def get_next_event_for_user(user_id: int, city: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        query = select(Event).where(
            Event.is_visible == True,
            Event.date_time > datetime.now()
        )
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥, —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –µ–≥–æ –≥–æ—Ä–æ–¥–µ
        if city:
            city_query = query.where(Event.city == city).order_by(Event.date_time).limit(1)
            result = await session.execute(city_query)
            event = result.scalar_one_or_none()
            
            if event:
                return event
        
        # –ï—Å–ª–∏ –≤ –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –ª—é–±–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ
        all_query = query.order_by(Event.date_time).limit(1)
        result = await session.execute(all_query)
        return result.scalar_one_or_none()

async def format_next_event_message(event, user_city: str = None, participants_count: int = 0):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–ª–∏–∂–∞–π—à–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º"""
    if not event:
        return (
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "üòî –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–æ –æ–Ω–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö:"
        )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –Ω–µ—Ç
    city_indicator = ""
    if user_city and event.city != user_city:
        city_indicator = f" (–≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ)"
    elif user_city and event.city == user_city:
        city_indicator = f" üéØ"
    
    # –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    time_until = event.date_time - datetime.now()
    
    if time_until.days > 0:
        time_text = f"—á–µ—Ä–µ–∑ {time_until.days} –¥–Ω."
    elif time_until.seconds > 3600:
        hours = time_until.seconds // 3600
        time_text = f"—á–µ—Ä–µ–∑ {hours} —á."
    else:
        minutes = time_until.seconds // 60
        time_text = f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω."
    
    message = f"üéâ <b>–ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ{city_indicator}</b>\n\n"
    message += f"üìÖ <b>{event.title}</b>\n"
    message += f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {event.city}\n"
    message += f"üïê <b>–î–∞—Ç–∞:</b> {event.date_time.strftime('%d.%m.%Y –≤ %H:%M')} ({time_text})\n"
    
    if event.location:
        message += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {event.location}\n"
    
    if event.max_participants:
        percentage = (participants_count / event.max_participants) * 100
        message += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {participants_count}/{event.max_participants} ({percentage:.0f}%)\n"
    else:
        message += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {participants_count}\n"
    
    if event.description and len(event.description) <= 100:
        message += f"\nüìù {event.description}\n"
    elif event.description:
        message += f"\nüìù {event.description[:97]}...\n"
    
    return message

async def show_next_event_welcome(message_or_callback, user, is_callback=False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –±–ª–∏–∂–∞–π—à–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º"""
    # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    next_event = await get_next_event_for_user(user.telegram_id, user.city)
    
    # –°—á–∏—Ç–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –µ—Å—Ç—å
    participants_count = 0
    if next_event:
        async with async_session() as session:
            participants_result = await session.execute(
                select(EventRegistration).where(EventRegistration.event_id == next_event.id)
            )
            participants_count = len(participants_result.scalars().all())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üëã\n\n"
    
    if user.role == 'admin':
        welcome_text += "üî± –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞\n\n"
    elif user.role == 'moderator':
        welcome_text += "üõ° –í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞\n\n"
    
    event_message = await format_next_event_message(next_event, user.city, participants_count)
    full_message = welcome_text + event_message
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    if next_event:
        keyboard = get_next_event_keyboard(next_event.id, True)
    else:
        keyboard = get_no_events_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_callback:
        await safe_edit_message(
            message_or_callback,
            full_message,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞
        if next_event and next_event.photo_file_id:
            await message_or_callback.answer_photo(
                photo=next_event.photo_file_id,
                caption=full_message,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        elif next_event and next_event.video_file_id:
            await message_or_callback.answer_video(
                video=next_event.video_file_id,
                caption=full_message,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await message_or_callback.answer(
                full_message,
                parse_mode="HTML",
                reply_markup=keyboard
            )

@router.message(Command("start"))
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    await show_next_event_welcome(message, user, is_callback=False)

@router.message(F.text == "üèôÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")
async def select_city(message: Message):
    """–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        reply_markup=get_cities_keyboard()
    )

@router.callback_query(F.data.startswith("city_"))
async def handle_city_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    city_code = callback.data.split("_")[1]
    city_name = "–ú–æ—Å–∫–≤–∞" if city_code == "moscow" else "–ö–∞–∑–∞–Ω—å"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if user:
            user.city = city_name
            await session.commit()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º
    await show_next_event_welcome(callback, user, is_callback=True)
    await callback.answer(f"–í–∞—à –≥–æ—Ä–æ–¥: {city_name} ‚úÖ")

@router.message(F.text == "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def show_events_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        user_city = user.city if user else None
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=get_events_keyboard(user_city)
    )

@router.callback_query(F.data == "all_events")
async def show_all_events(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    async with async_session() as session:
        result = await session.execute(
            select(Event)
            .where(Event.is_visible == True, Event.date_time > datetime.now())
            .order_by(Event.date_time)
        )
        events = result.scalars().all()
    
    if not events:
        await safe_edit_message(
            callback,
            "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π üòî",
            reply_markup=get_events_keyboard()
        )
        return
    
    await safe_edit_message(
        callback,
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:",
        reply_markup=build_events_list_keyboard(events)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("events_city_"))
async def show_city_events(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –≥–æ—Ä–æ–¥—É"""
    city_parts = callback.data.split("_")[2:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ "events_city_"
    city = "_".join(city_parts).lower()  # –°–æ–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    if city == "–º–æ—Å–∫–≤–∞":
        city_name = "–ú–æ—Å–∫–≤–∞"
    elif city == "–∫–∞–∑–∞–Ω—å":
        city_name = "–ö–∞–∑–∞–Ω—å"
    else:
        # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        city_name = "–ú–æ—Å–∫–≤–∞" if city == "moscow" else "–ö–∞–∑–∞–Ω—å"
    
    async with async_session() as session:
        result = await session.execute(
            select(Event)
            .where(
                Event.is_visible == True,
                Event.city == city_name,
                Event.date_time > datetime.now()
            )
            .order_by(Event.date_time)
        )
        events = result.scalars().all()
    
    if not events:
        await safe_edit_message(
            callback,
            f"–í –≥–æ—Ä–æ–¥–µ {city_name} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π üòî",
            reply_markup=get_events_keyboard(city_name)
        )
        return
    
    await safe_edit_message(
        callback,
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ {city_name}:",
        reply_markup=build_events_list_keyboard(events)
    )
    await callback.answer()

@router.callback_query(F.data == "my_events")
async def show_my_events(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)"""
    async with async_session() as session:
        result = await session.execute(
            select(Event)
            .join(EventRegistration)
            .join(User)
            .where(
                User.telegram_id == callback.from_user.id,
                Event.date_time > datetime.now()
            )
            .order_by(Event.date_time)
        )
        events = result.scalars().all()
    
    if not events:
        await safe_edit_message(
            callback,
            "–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üòî",
            reply_markup=get_events_keyboard()
        )
        return
    
    await safe_edit_message(
        callback,
        "–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=build_events_list_keyboard(events)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("event_"))
async def show_event_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one_or_none()
        
        if not event:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        reg_result = await session.execute(
            select(EventRegistration)
            .join(User)
            .where(
                User.telegram_id == callback.from_user.id,
                EventRegistration.event_id == event_id
            )
        )
        is_registered = reg_result.scalar_one_or_none() is not None
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
        user_result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = user_result.scalar_one_or_none()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–ª–∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_creator = user and user.id == event.creator_id
        is_admin_or_moderator = user and user.role in ['admin', 'moderator']
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_result = await session.execute(
            select(EventRegistration).where(EventRegistration.event_id == event_id)
        )
        participants_count = len(participants_result.scalars().all())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    event_text = f"üìÖ <b>{event.title}</b>\n\n"
    event_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    event_text += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {event.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    event_text += f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {event.city}\n"
    event_text += f"üïê <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {event.date_time.strftime('%d.%m.%Y –≤ %H:%M')}\n"
    
    if event.max_participants:
        event_text += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {participants_count}/{event.max_participants}\n"
    else:
        event_text += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {participants_count}\n"
    
    if event.registration_required:
        if event.registration_open:
            event_text += "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞</b>\n"
        else:
            event_text += "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞</b>\n"
    else:
        event_text += "üÜì <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    keyboard = get_event_actions_keyboard(event_id, is_registered, is_creator or is_admin_or_moderator)
    
    try:
        if event.photo_file_id:
            await callback.message.answer_photo(
                photo=event.photo_file_id,
                caption=event_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            await callback.message.delete()
        elif event.video_file_id:
            await callback.message.answer_video(
                video=event.video_file_id,
                caption=event_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            await callback.message.delete()
        else:
            await safe_edit_message(
                callback,
                event_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await safe_edit_message(
            callback,
            event_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("register_"))
async def register_for_event(callback: CallbackQuery):
    """–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    event_id = int(callback.data.split("_")[1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = user_result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event_result = await session.execute(select(Event).where(Event.id == event_id))
        event = event_result.scalar_one_or_none()
        
        if not event or not user:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        if not event.registration_open:
            await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        if event.date_time <= datetime.now():
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
        existing_reg = await session.execute(
            select(EventRegistration).where(
                EventRegistration.user_id == user.id,
                EventRegistration.event_id == event_id
            )
        )
        
        if existing_reg.scalar_one_or_none():
            await callback.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if event.max_participants:
            current_count = await session.execute(
                select(EventRegistration).where(EventRegistration.event_id == event_id)
            )
            if len(current_count.scalars().all()) >= event.max_participants:
                await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", show_alert=True)
                return
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        registration = EventRegistration(user_id=user.id, event_id=event_id)
        session.add(registration)
        await session.commit()
    
    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! ‚úÖ")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    await show_event_details(callback)

@router.callback_query(F.data.startswith("unregister_"))
async def unregister_from_event(callback: CallbackQuery):
    """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        reg_result = await session.execute(
            select(EventRegistration).where(
                EventRegistration.user_id == user.id,
                EventRegistration.event_id == event_id
            )
        )
        registration = reg_result.scalar_one_or_none()
        
        if not registration:
            await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", show_alert=True)
            return
        
        await session.delete(registration)
        await session.commit()
    
    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    await show_event_details(callback)

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        role = user.role if user else 'user'
    
    try:
        await callback.message.delete()
    except:
        pass
    
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu(role)
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_events")
async def back_to_events(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        user_city = user.city if user else None
    
    await safe_edit_message(
        callback,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=get_events_keyboard(user_city)
    )
    await callback.answer()

@router.message(F.text == "üí∞ –î–æ–Ω–∞—Ç")
async def donate_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–Ω–∞—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(
        "üí∞ –§—É–Ω–∫—Ü–∏—è –¥–æ–Ω–∞—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç! ‚ù§Ô∏è"
    )

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_user_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        events_created_result = await session.execute(
            select(Event).where(Event.creator_id == user.id)
        )
        events_created = len(events_created_result.scalars().all())
        
        events_registered_result = await session.execute(
            select(EventRegistration)
            .join(User)
            .where(User.telegram_id == message.from_user.id)
        )
        events_registered = len(events_registered_result.scalars().all())
        
        # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        upcoming_events_result = await session.execute(
            select(Event)
            .join(EventRegistration)
            .join(User)
            .where(
                User.telegram_id == message.from_user.id,
                Event.date_time > datetime.now()
            )
        )
        upcoming_events = len(upcoming_events_result.scalars().all())
    
    role_names = {
        'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', 
        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    }
    
    profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    profile_text += f"üîπ <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    if user.last_name:
        profile_text += f" {user.last_name}"
    profile_text += "\n"
    
    if user.username:
        profile_text += f"üîπ <b>Username:</b> @{user.username}\n"
    
    profile_text += f"üîπ <b>–†–æ–ª—å:</b> {role_names.get(user.role, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    profile_text += f"üîπ <b>–ì–æ—Ä–æ–¥:</b> {user.city or '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n"
    profile_text += f"üîπ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.created_at.strftime('%d.%m.%Y')}\n\n"
    
    profile_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    if user.role in ['moderator', 'admin']:
        profile_text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {events_created}\n"
    profile_text += f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {events_registered}\n"
    profile_text += f"‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {upcoming_events}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_profile_name")],
        [InlineKeyboardButton(text="üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="edit_profile_city")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await message.answer(
        profile_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question_handler(message: Message):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(
        "‚ùì –§—É–Ω–∫—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–ø—Ä—è–º—É—é."
    )

@router.callback_query(F.data == "edit_profile_name")
async def edit_profile_name(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏"""
    await safe_edit_message(
        callback,
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
        reply_markup=get_back_keyboard("back_to_menu")
    )
    await state.set_state(ProfileStates.waiting_for_name)
    await callback.answer()

@router.message(ProfileStates.waiting_for_name)
async def process_name_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏"""
    new_name = message.text.strip()
    
    if len(new_name) > 100:
        await message.answer(
            "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥':",
            reply_markup=get_back_keyboard("back_to_menu")
        )
        return
    
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if user:
            user.first_name = new_name
            await session.commit()
    
    await state.clear()
    await message.answer(
        f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}",
        reply_markup=get_main_menu(user.role if user else 'user')
    )

@router.callback_query(F.data == "edit_profile_city")
async def edit_profile_city(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
    await safe_edit_message(
        callback,
        "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        reply_markup=get_cities_keyboard()
    )
    await callback.answer()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX

@router.callback_query(F.data.startswith("event_participants_"))
async def show_event_participants(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    event_id = int(callback.data.split("_")[2])
    
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        user_result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = user_result.scalar_one_or_none()
        
        event_result = await session.execute(select(Event).where(Event.id == event_id))
        event = event_result.scalar_one_or_none()
        
        if not user or not event:
            await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if user.id != event.creator_id and user.role not in ['admin', 'moderator']:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_result = await session.execute(
            select(User)
            .join(EventRegistration)
            .where(EventRegistration.event_id == event_id)
            .order_by(EventRegistration.registered_at)
        )
        participants = participants_result.scalars().all()
    
    if not participants:
        participants_text = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: <b>{event.title}</b>\n\n"
        participants_text += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."
    else:
        participants_text = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: <b>{event.title}</b>\n\n"
        participants_text += f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n\n"
        
        for i, participant in enumerate(participants, 1):
            name = participant.first_name or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            if participant.last_name:
                name += f" {participant.last_name}"
            
            username = f"@{participant.username}" if participant.username else "–Ω–µ—Ç username"
            participants_text += f"{i}. {name} ({username})\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", callback_data=f"event_{event_id}")]
    ])
    
    await safe_edit_message(
        callback,
        participants_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data == "show_main_menu")
async def show_main_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        role = user.role if user else 'user'
    
    try:
        await callback.message.delete()
    except:
        pass
    
    await callback.message.answer(
        "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
        parse_mode="HTML",
        reply_markup=get_main_menu(role)
    )
    await callback.answer()

@router.callback_query(F.data == "select_city_inline")
async def select_city_inline(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    await safe_edit_message(
        callback,
        "üèôÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:</b>",
        parse_mode="HTML",
        reply_markup=get_cities_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "show_profile")
async def show_profile_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ callback"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        events_created_result = await session.execute(
            select(Event).where(Event.creator_id == user.id)
        )
        events_created = len(events_created_result.scalars().all())
        
        events_registered_result = await session.execute(
            select(EventRegistration)
            .join(User)
            .where(User.telegram_id == callback.from_user.id)
        )
        events_registered = len(events_registered_result.scalars().all())
        
        # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        upcoming_events_result = await session.execute(
            select(Event)
            .join(EventRegistration)
            .join(User)
            .where(
                User.telegram_id == callback.from_user.id,
                Event.date_time > datetime.now()
            )
        )
        upcoming_events = len(upcoming_events_result.scalars().all())
    
    role_names = {
        'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', 
        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    }
    
    profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    profile_text += f"üîπ <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    if user.last_name:
        profile_text += f" {user.last_name}"
    profile_text += "\n"
    
    if user.username:
        profile_text += f"üîπ <b>Username:</b> @{user.username}\n"
    
    profile_text += f"üîπ <b>–†–æ–ª—å:</b> {role_names.get(user.role, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    profile_text += f"üîπ <b>–ì–æ—Ä–æ–¥:</b> {user.city or '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n"
    profile_text += f"üîπ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.created_at.strftime('%d.%m.%Y')}\n\n"
    
    profile_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    if user.role in ['moderator', 'admin']:
        profile_text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {events_created}\n"
    profile_text += f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {events_registered}\n"
    profile_text += f"‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {upcoming_events}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_profile_name")],
        [InlineKeyboardButton(text="üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="edit_profile_city")],
        [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_welcome")]
    ])
    
    await safe_edit_message(
        callback,
        profile_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_welcome")
async def back_to_welcome(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é —Å –±–ª–∏–∂–∞–π—à–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
    
    await show_next_event_welcome(callback, user, is_callback=True)
    await callback.answer()

@router.message()
async def handle_unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
        reply_markup=get_main_menu('user')
    )